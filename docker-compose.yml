version: '3.8'

services:
  # API Service - Web interface and REST API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: mmvtrade:latest
    container_name: mmvtrade-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      # Uncomment to mount your configuration file
      # - ./config.py:/app/config.py:ro
    env_file:
      - .env
    environment:
      - RUN_MIGRATIONS=true
    command: api
    depends_on:
      - redis
    networks:
      - mmvnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker Service - Background processing for trading operations
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: mmvtrade:latest
    container_name: mmvtrade-worker
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      # Uncomment to mount your configuration file
      # - ./config.py:/app/config.py:ro
    env_file:
      - .env
    command: worker
    depends_on:
      - redis
    networks:
      - mmvnet

  # Scheduler Service - Runs periodic tasks like data fetching
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    image: mmvtrade:latest
    container_name: mmvtrade-scheduler
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      # Uncomment to mount your configuration file
      # - ./config.py:/app/config.py:ro
    env_file:
      - .env
    command: scheduler
    depends_on:
      - redis
    networks:
      - mmvnet

  # Redis for caching, message queue and task management
  redis:
    image: redis:6-alpine
    container_name: mmvtrade-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - mmvnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  mmvnet:
    driver: bridge

volumes:
  redis_data:
    # Persist Redis data between container restarts
    driver: local 